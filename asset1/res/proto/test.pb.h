// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mw {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Test;

// ===================================================================

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string attr1 = 1;
  inline bool has_attr1() const;
  inline void clear_attr1();
  static const int kAttr1FieldNumber = 1;
  inline const ::std::string& attr1() const;
  inline void set_attr1(const ::std::string& value);
  inline void set_attr1(const char* value);
  inline void set_attr1(const char* value, size_t size);
  inline ::std::string* mutable_attr1();
  inline ::std::string* release_attr1();
  inline void set_allocated_attr1(::std::string* attr1);

  // required int32 attr2 = 2;
  inline bool has_attr2() const;
  inline void clear_attr2();
  static const int kAttr2FieldNumber = 2;
  inline ::google::protobuf::int32 attr2() const;
  inline void set_attr2(::google::protobuf::int32 value);

  // optional bool attr3 = 3;
  inline bool has_attr3() const;
  inline void clear_attr3();
  static const int kAttr3FieldNumber = 3;
  inline bool attr3() const;
  inline void set_attr3(bool value);

  // @@protoc_insertion_point(class_scope:mw.Test)
 private:
  inline void set_has_attr1();
  inline void clear_has_attr1();
  inline void set_has_attr2();
  inline void clear_has_attr2();
  inline void set_has_attr3();
  inline void clear_has_attr3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attr1_;
  ::google::protobuf::int32 attr2_;
  bool attr3_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Test

// required string attr1 = 1;
inline bool Test::has_attr1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_attr1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_attr1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_attr1() {
  if (attr1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attr1_->clear();
  }
  clear_has_attr1();
}
inline const ::std::string& Test::attr1() const {
  // @@protoc_insertion_point(field_get:mw.Test.attr1)
  return *attr1_;
}
inline void Test::set_attr1(const ::std::string& value) {
  set_has_attr1();
  if (attr1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attr1_ = new ::std::string;
  }
  attr1_->assign(value);
  // @@protoc_insertion_point(field_set:mw.Test.attr1)
}
inline void Test::set_attr1(const char* value) {
  set_has_attr1();
  if (attr1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attr1_ = new ::std::string;
  }
  attr1_->assign(value);
  // @@protoc_insertion_point(field_set_char:mw.Test.attr1)
}
inline void Test::set_attr1(const char* value, size_t size) {
  set_has_attr1();
  if (attr1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attr1_ = new ::std::string;
  }
  attr1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mw.Test.attr1)
}
inline ::std::string* Test::mutable_attr1() {
  set_has_attr1();
  if (attr1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attr1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mw.Test.attr1)
  return attr1_;
}
inline ::std::string* Test::release_attr1() {
  clear_has_attr1();
  if (attr1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attr1_;
    attr1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Test::set_allocated_attr1(::std::string* attr1) {
  if (attr1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attr1_;
  }
  if (attr1) {
    set_has_attr1();
    attr1_ = attr1;
  } else {
    clear_has_attr1();
    attr1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mw.Test.attr1)
}

// required int32 attr2 = 2;
inline bool Test::has_attr2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_attr2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_attr2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_attr2() {
  attr2_ = 0;
  clear_has_attr2();
}
inline ::google::protobuf::int32 Test::attr2() const {
  // @@protoc_insertion_point(field_get:mw.Test.attr2)
  return attr2_;
}
inline void Test::set_attr2(::google::protobuf::int32 value) {
  set_has_attr2();
  attr2_ = value;
  // @@protoc_insertion_point(field_set:mw.Test.attr2)
}

// optional bool attr3 = 3;
inline bool Test::has_attr3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test::set_has_attr3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test::clear_has_attr3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test::clear_attr3() {
  attr3_ = false;
  clear_has_attr3();
}
inline bool Test::attr3() const {
  // @@protoc_insertion_point(field_get:mw.Test.attr3)
  return attr3_;
}
inline void Test::set_attr3(bool value) {
  set_has_attr3();
  attr3_ = value;
  // @@protoc_insertion_point(field_set:mw.Test.attr3)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mw

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
