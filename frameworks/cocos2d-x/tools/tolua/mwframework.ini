[mwframework]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = mwframework

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = mw

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include 
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/2d -I%(cocosdir)s/cocos/3d -I%(cocosdir)s/cocos/base -I%(cocosdir)s/cocos/ui -I%(cocosdir)s/cocos/physics -I%(cocosdir)s/cocos/2d/platform -I%(cocosdir)s/cocos/2d/platform/android -I%(cocosdir)s/cocos/math -I%(cocosdir)s/extensions -I%(cocosdir)s/external -I%(cocosdir)s/cocos/editor-support -I%(cocosdir)s -I%(cocosdir)s/cocos/scripting/lua-bindings/manual -I%(cocosdir)s/external/lua/lua -I%(cocosdir)s/external/lua/tolua -I%(cocosdir)s/cocos/network

cocos_flags = -DANDROID

cxxgenerator_headers = 

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s 

# what headers to parse
headers = %(cocosdir)s/../runtime-src/Framework/mwframework.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = MWObject MWBinaryData MWException MWDictionary MWArrayList MWQueue MWStack MWSystemHelper MWIOUtils MWGameScene MWViewController MWGameView MWViewSegue MWSmoothRope MWSqliteDb MWZipData MWGifFrame MWGifSprite MWGifFramesCache MWSvgSprite MWJsonObject MWJsonArray MWUUIDGenerator MWNetHandler MWNetFilter MWNetRequest MWNetResponse MWNetProtocol MWNetCenter MWHttpGetService MWHttpPostService MWTcpService MWSocketIOService MWTcpSocket MWCrypto MWAssetManager MWAStarPathFinder

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip =  MWBinaryData::[create getData getSize],
		MWDictionary::[allKeys],
		MWGameScene::[createWithParams onEnter onExit onEnterTransitionDidFinish onExitTransitionDidStart],
		MWViewController::[viewDidLoad viewDidUnload didReceiveMemoryWarning],
		MWViewSegue::[viewReadyToSegue viewDidSegue viewDidSegueBack],
		MWSqliteDb::[executeQuery],
		MWGifSprite::[getFrames],
		MWJsonObject::[allKeys],
		MWNetHandler::[handleSuccessfulMessage handleFailedMessage],
		MWNetFilter::[filterSuccessfulMessage filterFailedMessage],
		MWHttpGetService::[setTransferRule],
		MWHttpPostService::[setTransferRule],
		MWTcpService::[update],
		MWSocketIOService::[onConnect onMessage onClose onError fireEventToScript],
		MWAssetManager::[setAssetUpdateDelegate],
		MWAStarPathFinder::[setDelegate getFoundPath]

rename_functions =

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = MWAssetManager

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = IHttpDownloaderDelegate

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = IHttpDownloaderDelegate

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = yes

